{"remainingRequest":"/home/cyding/speedle-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cyding/speedle-ui/src/components/TreeItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/cyding/speedle-ui/src/components/TreeItem.vue","mtime":1594533135670},{"path":"/home/cyding/speedle-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cyding/speedle-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/cyding/speedle-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cyding/speedle-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnVHJlZUl0ZW0nLAogIHRlbXBsYXRlOiAnbXktdHJlZS1ub2RlLXRlbXBsYXRlJywKICBwcm9wczogewogICAgaXRlbTogT2JqZWN0LAogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGlzT3BlbjogZmFsc2UsCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGlzRm9sZGVyKCkgewogICAgICByZXR1cm4gdGhpcy5pdGVtLmNoaWxkcmVuICYmIHRoaXMuaXRlbS5jaGlsZHJlbi5sZW5ndGg7CiAgICB9LAogIH0sCiAgbWV0aG9kczogewogICAgdG9nZ2xlKCkgewogICAgICBpZiAodGhpcy5pc0ZvbGRlcikgewogICAgICAgIHRoaXMuaXNPcGVuID0gIXRoaXMuaXNPcGVuOwogICAgICB9CiAgICB9LAogICAgbWFrZUZvbGRlcigpIHsKICAgICAgaWYgKCF0aGlzLmlzRm9sZGVyKSB7CiAgICAgICAgdGhpcy4kZW1pdCgnbWFrZS1mb2xkZXInLCB0aGlzLml0ZW0pOwogICAgICAgIHRoaXMuaXNPcGVuID0gdHJ1ZTsKICAgICAgfQogICAgfSwKICB9LAp9Owo="},{"version":3,"sources":["TreeItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TreeItem.vue","sourceRoot":"src/components","sourcesContent":["<template id=\"my-tree-node-template\">\n     <li>\n        <div\n          :class=\"{bold: isFolder}\"\n          @click=\"toggle\"\n          @dblclick=\"makeFolder\">\n          {{ item.name }}\n          <span v-if=\"isFolder\">[{{ isOpen ? '-' : '+' }}]</span>\n        </div>\n        <ul v-show=\"isOpen\" v-if=\"isFolder\">\n          <tree-item\n            class=\"item\"\n            v-for=\"(child, index) in item.children\"\n            :key=\"index\"\n            :item=\"child\"\n            @make-folder=\"$emit('make-folder', $event)\"\n            @add-item=\"$emit('add-item', $event)\"\n          ></tree-item>\n          <li class=\"add\" @click=\"$emit('add-item', item)\">+</li>\n        </ul>\n      </li>\n</template>\n<script>\nexport default {\n  name: 'TreeItem',\n  template: 'my-tree-node-template',\n  props: {\n    item: Object,\n  },\n  data() {\n    return {\n      isOpen: false,\n    };\n  },\n  computed: {\n    isFolder() {\n      return this.item.children && this.item.children.length;\n    },\n  },\n  methods: {\n    toggle() {\n      if (this.isFolder) {\n        this.isOpen = !this.isOpen;\n      }\n    },\n    makeFolder() {\n      if (!this.isFolder) {\n        this.$emit('make-folder', this.item);\n        this.isOpen = true;\n      }\n    },\n  },\n};\n</script>\n"]}]}